@use "utilities" as *;

.hero {
  @extend %layout-grid;

  background-color: var(--hue-shade-100);
  min-height: 44vh;

  margin: 0 0 var(--a3);

  &__visual {
    grid-column: full-bleed;
    min-height: 33vh;
  }

  &__title {
    @extend %typography-title;

    grid-column: content-full;
    margin: 0 0 var(--b1);
  }

  &__summary {
    @extend %typography-summary;

    grid-column: content-full;
    margin: 0 0 var(--a2);
  }
}

// I style generic tags in the `section` block to avoid class="" bloat.
.section {
  @extend %layout-grid;

  margin: 0 0 var(--a3);

  .header {
    grid-column: header;

    h2 {
      @extend %typography-section-heading;

      margin: 0 0 var(--a-1);
    }

    &__parenthetical {
      @extend %typography-supporting;

      color: var(--hue-shade-700);
    }
  }

  h3 {
    grid-column: content-full;

    margin: 0;
  }

  p, ul {
    @extend %typography-body;

    grid-column: content-full;
    margin: 0 0 var(--b0);
  }

  > p:first-of-type::first-line, strong {
    font-weight: 450;
  }

  > :last-child {
    margin-bottom: 0;
  }

  .p__container {
    grid-column: content-full;

    aside {
      background: var(--hue-blue-100);
      float: right;
      margin: 0 calc(var(--a1) * -1) var(--a0) var(--a0);
      min-height: var(--a4);
      width: calc(33.3333% - (var(--a0) * 2 / 3) + var(--a1));

      //clip-path: polygon(7rem 0, 0 10rem, 14rem 10rem);
      //shape-outside: polygon(7rem 0, 0 10rem, 14rem 10rem); //note! negative margins affects percentages for shape outside
    }
  }

  ul {
    grid-column: content-full;
    list-style: none;
    padding: 0;

    li {
      margin: 0 0 var(--b0);
      position: relative;

      // I want a responsive bullet, but using rems on pseudo elements can
      // make them non-square (they get squished!). This uses a clip path
      // on a pseudo element that spans the height of the list item, with
      // an extra half-pixel for safety. (This is so fiddly...)
      &::before {
        background: var(--hue-shade-500);
        clip-path: circle(calc((var(--a-2) / 2) - 0.5px) at 50% calc(var(--a0) * 1.5 / 2));
        content: '';
        display: block;
        height: 100%;
        margin: 0 calc(var(--b0) - var(--a-2)) 0 calc(var(--a0) * -1);
        position: absolute;
        width: var(--a-2);
      }

      &:last-of-type {
        margin-bottom: 0;
      }
    }
  }

.details__key {
  @extend %typography-subheading;

  grid-column: details-key;
}

.details__value,
.details__valuelist {
  @extend %typography-details;

  grid-column: details-value;
}
}

// To minimize all repaints, draw the “underline” via box-shadow and
// apply no transitions. Manipualte the background and text colors on hover
// and active. For some extra offset, apply padding and negative margins,
// and then have those decorations cloned for wrapped link lines.
a {
  box-shadow: 0 calc(-1 * var(--padding-link-decoration)) 0 0 var(--translucent-red-20) inset;
  box-decoration-break: clone;
  -webkit-box-decoration-break: clone;
  background-color: rgba(213,47,10,0);
  color: var(--hue-red-500);
  margin: 0 calc(-1 * var(--padding-link-decoration));
  padding: 0 var(--padding-link-decoration);
  transition: background-color .125s, color .125s;
  text-decoration: none;

  &.link--no-underline {
    box-shadow: none;
  }

  &:hover, &:focus {
    background-color: var(--hue-red-500);
    color: var(--hue-shade-0);
  }

  &:focus-visible {
    outline: 1px solid var(--hue-red-700);
  }

  // Ever tried click-n-dragging in Safari? The color isn’t inherited. Ugh.
  &:active {
    color: var(--hue-shade-100);
    background-color: var(--hue-red-700);
    transition: none;
  }
}













// Grid properties are kept here for clarity.
.structure {
  /*
  // Essentially single-column, with a
  // narrow ending sidebar for a little variation.
  display: grid;
  grid-template:
    minmax(min-content, 20vh) auto /
    [header-start fullwidth-start content-start summary-start content-aside-start aside-start spec-key-start spec-value-start gallery-start] 6fr
    [content-end content-aside-end spec-key-end spec-value-end summary-end] 1fr
    [header-end aside-end fullwidth-end gallery-end];
  grid-gap: 1rem;
  align-items: baseline;

  @include at-least(w0) {
    grid-template:
      minmax(min-content, 24vh) auto /
      [sidebar-start] calc(var(--width-sidebar-collapsed) * 1rem)
      [header-start fullwidth-start content-start summary-start content-aside-start spec-key-start gallery-start] minmax(min-content, 8rem)
      1fr
      [spec-key-end spec-value-start] 1fr
      [content-aside-end aside-start] 1fr
      1fr
      [summary-end content-end header-end] 1fr
      [aside-end fullwidth-end spec-value-end gallery-end];
  }

  @include at-least(w2) {
    grid-template:
      minmax(min-content, 28vh) auto /
      [sidebar-start] calc(var(--width-sidebar-collapsed) * 1rem)
      [header-start fullwidth-start sidebar-end] minmax(min-content, 8rem)
      [header-end content-start summary-start content-aside-start spec-key-start gallery-start] 1fr
      1fr
      [spec-key-end spec-value-start] 1fr
      [content-aside-end aside-start] 1fr
      [summary-end content-end] var(--a3)
      [aside-end fullwidth-end spec-value-end gallery-end] var(--a0)
      [padding-end];
  }

  @media (min-width: 1120px) {
    grid-template:
      minmax(min-content, 36vh) auto /
      [sidebar-start] calc(var(--width-sidebar-collapsed) * 1rem)
      [header-start fullwidth-start] minmax(min-content, 8rem)
      [header-end content-start summary-start content-aside-start spec-key-start gallery-start] 1fr
      [spec-key-end spec-value-start] 1fr
      1fr
      [summary-end content-end content-aside-end aside-start spec-value-end] 1fr
      1fr
      [aside-end fullwidth-end gallery-end] var(--a0)
      [padding-end];
  }*/
}
