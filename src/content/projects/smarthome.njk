---
title: Smarthome

shortname: smarthome

summary: This hobby project — a combination of a web app, Raspberry Pi, and an old iPhone 4 — has powered my apartment lighting since 2015.

ogdesc: Learn how I built my custom apartment lighting system, going strong since 2015.

ogimage: /img/og-smarthome.png

---

{% from "src/components/aside/_aside.njk" import asideStart, asideEnd %}
{% from "src/components/details/_details.njk" import details %}
{% from "src/components/gallery/_gallery.njk" import galleryStart, galleryEnd %}
{% from "src/components/lead-in/_lead-in.njk" import leadIn %}
{% from "src/components/section-header/_section-header.njk" import sectionHeader %}
{% from "src/components/related/_related.njk" import related %}
{% from "src/components/retrospective/_retrospective.njk" import retrospective %}

<section class="section">
  {{ sectionHeader("Motivation") }}

  <p>{{ leadIn("I love living in cities,") }} which means I’ve been an apartment dweller for several years. Though every apartment is different, each place has had its share of questionable décor decisions. As a renter, I’ve made my peace with things like antique kitchen appliances and unappealing bathroom hardware. But in each one, my most common gripe has always been with the overhead lighting.</p>

  <p>Each place I’ve lived in has had its own, uh, character: <a href="https://www.apartmenttherapy.com/boob-lamps-36720027">finial-adorned domes or “boob” lights</a>, <a href="https://www.homedepot.com/p/Hunter-Highbury-II-52-in-LED-Indoor-Matte-Black-Ceiling-Fan-with-Light-Kit-52028/300593308#product-overview">ceiling fan floodlights</a>, the <a href="https://www.shadesoflight.com/products/vintage-modern-crystal-mini-chandelier">most miniature chandeliers</a> ever. The look of these fixtures wasn’t great, and neither was the flickering, overpowering, inefficient light they gave off.</p>

  <p>The easy solution was to simply skip the ceiling lights altogether, relying on lamps and custom lights to illuminate my place. In the first apartment I did that in, though, I quickly faced the downside of having separate switches for every single light. Without a single wall switch, I found myself running around <a href="https://www.youtube.com/watch?v=nVvxOwxuk_w">trying to find the clickers or the switches or the doodads</a> for each light.

  <p>To get customized lighting without all that fiddling around, I decided to look into some sort of centralized, smart-ish home solution. And instead of reaching for something off the shelf, I began by researching DIY projects to see if I could build something totally custom.</p>
</section>

<section class="section">
  {{ sectionHeader("Process") }}
  <div class="section__contents">
    {{ asideStart() }}
    {% responsiveImage "./src/supporting/images/breadboard.jpg", "The breadboard with the transmitter for my wireless outlets", "", "div" %}
    {{ asideEnd("The breadboard and transmitter at the crux of this project. (Don’t rely on me for your next electrical engineering project.)") }}

    <p>{{ leadIn("My quest for a DIY") }} smart outlet system started with <a href="https://timleland.com/wireless-power-outlets/">a guide</a> that explained how to link up a <a href="https://www.etekcity.com/product/100068">particular brand</a> of remote-controlled outlets with some other parts to make an extensible system. With a Raspberry Pi, a transmitter chip, and an <a href="https://github.com/timleland/rfoutlet">open-source program</a> to control the outlets from a command line, I’d be able to turn on my lights over the internet. I got going by assembling my very first breadboard, connecting the chip to it, and confirming that everything worked.</p>

    <p>The guide then described how to set up a web server and hosted webpage on the Pi to give the terminal commands a UI. As a final step, it included a little proof-of-concept webpage that looked identical to the physical remote control’s buttons and layout. Since I wanted to push the interface a lot farther, though, it was time to keep going on my own.</p>

    <h3 class="subheader">Giving the outlets a brain</h3>
    <p>Out of the box, the outlets didn’t come with a centralized hub. This meant that there was no way to keep track of which lights were on, and it explained why there were separate “on” and “off” buttons on the remote and the example webpage. But with a whole Raspberry Pi to work with, I could easily add in that missing piece.</p>

    {{ asideStart("aside--full svg--scale-stroke") }}
    {% include "src/supporting/inline-svg/smarthome-diagram.svg" %}</p>
    {{ asideEnd("This is a high-level diagram of how Smarthome works. To turn on a light, I tap a button on the iPhone web app. That triggers the web server to run an “outlet on” command using the open-source program, which transmits the wireless signal through the chip on the breadboard. The signal gets picked up by the outlet and the light flicks on.")}}

    <p>So… I did! I routed the outlet commands through a state object so that I could keep track of each light’s status, plus extra metadata like the room it was in and its light type. No longer needing to rely on separate buttons, I could add in all sorts of helpful controls, like:</p>
    <ul>
      <li>Turning on all lights in a particular room</li>
      <li>Setting and swapping out predefined scenes, like “waking up” or “evening”</li>
      <li>Controlling separate outlets together, like a pair of lamps behaving as one</li>
      <li>Turning off everything before leaving</li>
    </ul>
  </div>

  <h3 class="subheader">Balancing functionality with aesthetics</h3>
  <div class="section__contents">
    {{ asideStart() }}
    {% responsiveImage "./src/supporting/images/smarthome-screenshot.png", "A screenshot of Smarthome", "", "div" %}
    {{ asideEnd("Smarthome with the Pride color theme enabled. The layout is based off of my T-shaped apartment, and each light button is positioned in roughly the same spot as in my home.") }}

    <p>From the start of the project, I planned to use a dedicated device to display the switches and status so that turning on an outlet would be just as easy as flipping a light switch. Since this thing (specifically, a trusty ol’ iPhone 4) would be permanently affixed to the wall, I wanted it to have a purposeful, well-designed appearance that presented all these controls and statuses in a clear way.</p>

    <p>Taking some design cues from other products, like an <a href="https://developer.apple.com/design/human-interface-guidelines/watchos/visual/layout/">Apple Watch</a> or Google Nest, I opted for a dark interface so that the web app merged seamlessly into the iPhone’s black display bezel. For the UI itself, I created an abstracted layout of my apartment and positioned the buttons corresponding to an outlet’s physical location. To indicate status, each button switch got an icon, becoming highlighted when that light turned on. Finally, I put scene buttons and the “everything off” button at the bottom of the screen.</p>
  </div>

  <h3 class="subheader">Iterate, iterate, and iterate some more</h3>

  <p>As time went on, I iteratively added more features to make this system feel less generic and more like a custom project. I added things like:</p>
  <ul>
  <li>Color themes like a subtle rainbow theme for Pride 2019</li>
  <li>Current weather, to take advantage of some free space and make the phone on the wall even more useful</li>
  <li>An extremely exciting time and date</li>
  </ul>

  <p>I also made the always-on-the-wall iPhone behave even more like a home appliance by enhancing it with some <a href="https://en.wikipedia.org/wiki/IOS_jailbreaking">custom functionality</a>. Doing so allowed me to precisely adjust the iPhone’s brightness based on ambient light, disable the lock screen, and schedule a period overnight to put the phone to sleep.</p>

  <p>More recently, I added a couple more old iPhones to the mix&thinsp;—&thinsp;they’re inexpensive on eBay these days&thinsp;—&thinsp;and a menubar app on my Mac, keeping my system scaling and adapting just for me.</p>
</section>


{{ galleryStart() }}
{% responsiveImage "./src/supporting/images/smarthome-wall.jpg", "The second cool thing", "responsive--halfwide" %}
{% responsiveImage "./src/supporting/images/smarthome-menubar.png", "The second cool thing", "responsive--halfwide" %}
{% responsiveImage "./src/supporting/images/smarthome-hall.jpg", "The second cool thing", "responsive--fullwide" %}
{{ galleryEnd() }}




{{
  retrospective([
    {
      rating: "good",
      summary: "Smarthome has been consistently reliable and useful.",
      content: "I’m pretty pleased, especially considering the project is cobbled together with low-cost outlets, my best attempt at circuitry, and some old iPhones."
    },
    {
      rating: "bad",
      summary: "The app doesn’t run on a frontend framework yet.",
      content: "I have some ideas for granular light controls, dimmers, and other interface techniques. A framework will let me abstract away state management for the UI and focus on the fun stuff."
    },
    {
      rating: "good",
      summary: "Adding color themes helped to make Smarthome feel like mine.",
      content: "Earlier versions were strictly monochromatic, which was sleek… to the point where it kind of felt sterile. It was a nice reminder of the big impacts that little changes like these can have."
    }
  ])
}}


{{
  details([
    {
      key: "Timeframe",
      value: "Original iteration introduced July 2015. Current, redesigned interation introduced December 2017. Features added June 2019."
    },
    {
      key: "Skills in use",
      value: "Frontend programming, UI design, hardware/software interaction design, graphic design and layout, device management"
    },
    {
      key: "Tech specs",
      value: [
        "System that interfaces with radio-frequency (RF) controlled outlets via rfoutlet, an interface to send signals from a transmitter chip",
        "Raspberry Pi web server bridge between app and transmitter, including a custom system status mechanism using PHP",
        "Lightweight web app built with HTML, CSS, and JavaScript",
        "Two iPhone 4 devices with extra capabilities for finer power management and appearance control",
        "Simple menubar app for macOS"
      ]
    },
    {
      key: "Status as of December 2020",
      value: "I still use it! Works as well as ever."
    }
  ])
}}

{{
  related([
    {
      leader: "Another website project",
      title: "Recreational Sports",
      description: "A fully-designed website, from frontend to backend, leading to an increase in memberships",
      url: "/projects/recsports"
    },
    {
      leader: "Or, a non-sequitur",
      title: "CrowdTwist UX Redesign",
      description: "Participatory design sessions that led to a comprehensive plan to improve our core offering",
      url: "/projects/ux-redesign"
    }
  ])
}}
